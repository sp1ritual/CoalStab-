#include <iostream>
#include <fstream>
#include <dlfcn.h>
#include <random>
#include <curl/curl.h>
#include <json/json.h>
#include <chrono>
#include <ctime>

// Типы функций для DynamicStability
typedef void* (*create_t)(double, double, double, double);
typedef void (*destroy_t)(void*);
typedef double (*calculate_t)(void*);

// Типы функций для библиотеки SafetyFactor
typedef void* (*createSafetyFactor_t)();
typedef void (*destroySafetyFactor_t)(void*);
typedef double (*calculateSafety_t)(void*, double, double);

// Типы функций для библиотеки SlopeAngle
typedef void* (*createSlopeAngle_t)(double, double);
typedef void (*destroySlopeAngle_t)(void*);
typedef double (*calculateAngle_t)(void*);

// Типы функций для библиотеки Stability
typedef void* (*createStability_t)(double, double);
typedef void (*destroyStability_t)(void*);
typedef double (*calcStability_t)(void*);

size_t write_callback(void* contents, size_t size, size_t nmemb, std::string* s) {
    size_t total_size = size * nmemb;
    s->append(static_cast<char*>(contents), total_size);
    return total_size;
}

double getRandomNumber(double min, double max) {
    static std::random_device rd;
    static std::mt19937 gen(rd());
    std::uniform_real_distribution<> dis(min, max);
    return dis(gen);
}

void saveToFile(double Dstability_result, double safety_result, double slope_result, double stability_result, float humidity, float temperature, float precipitation, float wind_speed) {
    std::ofstream file("weather_data.txt", std::ios::app);
    if (!file.is_open()) {
        std::cerr << "Unable to open file!" << std::endl;
        return;
    }
    
    auto now = std::chrono::system_clock::now();
    std::time_t time_now = std::chrono::system_clock::to_time_t(now);

    
    file << "Date and Time: " << std::ctime(&time_now) << std::endl;
    file << "Dynamic Stability Factor: " << Dstability_result << std::endl;
    file << "Safety Factor: " << safety_result << std::endl;
    file << "Slope Angle: " << slope_result << std::endl;
    file << "Stability: " << stability_result << std::endl;
    file << "Humidity: " << humidity << "%" << std::endl;
    file << "Temperature: " << temperature << "K" << std::endl;
    file << "Precipitation: " << precipitation << "mm" << std::endl;
    file << "Wind Speed: " << wind_speed << " m/s" << std::endl;
    file << "---------------------------------------------" << std::endl;

   
    file.close();
}

int main() {
    void* handle1 = dlopen("./libdlyb.dylib", RTLD_LAZY);
    if (!handle1) {
        std::cerr << "Cannot open library 1: " << dlerror() << '\n';
        return 1;
    }

    create_t create = reinterpret_cast<create_t>(dlsym(handle1, "create"));
    destroy_t destroy = reinterpret_cast<destroy_t>(dlsym(handle1, "destroy"));
    calculate_t calculate = reinterpret_cast<calculate_t>(dlsym(handle1, "calculate"));

    if (!create || !destroy || !calculate) {
        std::cerr << "Cannot load symbol from first library\n";
        dlclose(handle1);
        return 1;
    }

    void* handle2 = dlopen("./libsafetyfactor.dylib", RTLD_LAZY);
    if (!handle2) {
        std::cerr << "Cannot open library 2: " << dlerror() << '\n';
        dlclose(handle1);
        return 1;
    }

    createSafetyFactor_t createSafetyFactor = reinterpret_cast<createSafetyFactor_t>(dlsym(handle2, "createSafetyFactor"));
    destroySafetyFactor_t destroySafetyFactor = reinterpret_cast<destroySafetyFactor_t>(dlsym(handle2, "destroySafetyFactor"));
    calculateSafety_t calculateSafety = reinterpret_cast<calculateSafety_t>(dlsym(handle2, "calculateSafety"));

    if (!createSafetyFactor || !destroySafetyFactor || !calculateSafety) {
        std::cerr << "Cannot load symbol from safety factor library\n";
        dlclose(handle1);
        dlclose(handle2);
        return 1;
    }

    void* handle3 = dlopen("./libslopeangle.dylib", RTLD_LAZY);
    if (!handle3) {
        std::cerr << "Cannot open library 3: " << dlerror() << '\n';
        dlclose(handle1);
        dlclose(handle2);
        return 1;
    }

    createSlopeAngle_t createSlopeAngle = reinterpret_cast<createSlopeAngle_t>(dlsym(handle3, "createSlopeAngle"));
    destroySlopeAngle_t destroySlopeAngle = reinterpret_cast<destroySlopeAngle_t>(dlsym(handle3, "destroySlopeAngle"));
    calculateAngle_t calculateAngle = reinterpret_cast<calculateAngle_t>(dlsym(handle3, "calculateAngle"));

    if (!createSlopeAngle || !destroySlopeAngle || !calculateAngle) {
        std::cerr << "Cannot load symbol from slope angle library\n";
        dlclose(handle1);
        dlclose(handle2);
        dlclose(handle3);
        return 1;
    }

    void* handle4 = dlopen("./libstability.dylib", RTLD_LAZY);
    if (!handle4) {
        std::cerr << "Cannot open library 4: " << dlerror() << '\n';
        dlclose(handle1);
        dlclose(handle2);
        dlclose(handle3);
        return 1;
    }

    createStability_t createStability = reinterpret_cast<createStability_t>(dlsym(handle4, "createStability"));
    destroyStability_t destroyStability = reinterpret_cast<destroyStability_t>(dlsym(handle4, "destroyStability"));
    calcStability_t calcStability = reinterpret_cast<calcStability_t>(dlsym(handle4, "calcStability"));

    if (!createStability || !destroyStability || !calcStability) {
        std::cerr << "Cannot load symbol from stability library\n";
        dlclose(handle1);
        dlclose(handle2);
        dlclose(handle3);
        dlclose(handle4);
        return 1;
    }

    // Работа с DynamicStability
    void* Dstability = create(getRandomNumber(2.0, 100.0), getRandomNumber(15.0, 100.0), getRandomNumber(2.0, 100.0), getRandomNumber(1.0, 10.0));
    double Dstability_result = calculate(Dstability);
    std::cout << "Dynamic Stability Factor: " << Dstability_result << std::endl;
    destroy(Dstability);

    // Работа с библиотекой SafetyFactor
    void* safetyFactorObj = createSafetyFactor();
    double safety_result = calculateSafety(safetyFactorObj, getRandomNumber(0.0, 10.0), getRandomNumber(0.0, 10.0));
    std::cout << "Safety Factor: " << safety_result << std::endl;
    destroySafetyFactor(safetyFactorObj);

    // Работа с библиотекой SlopeAngle
    void* slope = createSlopeAngle(getRandomNumber(0.0, 90.0), getRandomNumber(0.0, 90.0));
    double slope_result = calculateAngle(slope);
    std::cout << "Slope Angle: " << slope_result << std::endl;
    destroySlopeAngle(slope);

    // Работа с библиотекой Stability
    void* stability = createStability(getRandomNumber(0.0, 10.0), getRandomNumber(0.0, 10.0));
    double stability_result = calcStability(stability);
    std::cout << "Stability: " << stability_result << std::endl;
    destroyStability(stability);

    // Закрываем библиотеки 
    dlclose(handle1);
    dlclose(handle2);
    dlclose(handle3);
    dlclose(handle4);

    // Обработка данных погоды
    CURL* curl;
    CURLcode res;
    curl = curl_easy_init();

    if (curl) {
        std::string city = "Kemerovo";
        std::string api_key = "3843c62f930c1dec6121067562c726aa";
        std::string url = "http://api.openweathermap.org/data/2.5/weather?q=" + city + "&appid=" + api_key;

        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);

        std::string response_string;

        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_string);

        res = curl_easy_perform(curl);

        if (res == CURLE_OK) {
            Json::Value root;
            Json::Reader reader;
            bool parsingSuccessful = reader.parse(response_string, root);
            if (parsingSuccessful) {

                float humidity = root["main"]["humidity"].asFloat();
                float temperature = root["main"]["temp"].asFloat();
                float precipitation = 0.0f; // No precipitation in the example JSON
                if (root.isMember("rain") && root["rain"].isObject() && root["rain"].isMember("1h")) {
                    precipitation = root["rain"]["1h"].asFloat();
                }
                float wind_speed = root["wind"]["speed"].asFloat();

                std::cout << "Влажность: " << humidity << "%" << std::endl;
                std::cout << "Температура: " << temperature << "K" << std::endl;
                std::cout << "Количество осадков: " << precipitation << "mm" << std::endl;
                std::cout << "Скорость ветра: " << wind_speed << " м/с" << std::endl;

                // Сохранение данных в файл
                saveToFile(Dstability_result, safety_result, slope_result, stability_result, humidity, temperature, precipitation, wind_speed);
            }
            else {
                std::cerr << "Ошибка при парсинге JSON\n";
            }
        }
        else {
            std::cerr << "Ошибка при выполнении запроса: " << curl_easy_strerror(res) << std::endl;
        }
        curl_easy_cleanup(curl);
    }
    else {
        std::cerr << "Не удалось инициализировать libcurl" << std::endl;
    }

    return 0;
}
